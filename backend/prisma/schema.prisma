generator client {
  provider             = "prisma-client-py"
  recursive_type_depth = -1
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String?
  email       String   @unique
  password    String
  is_verified Boolean  @default(false)
  otp         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  folders     Folder[]
  files       File[]
}

enum FileStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model File {
  id          String      @id @default(cuid())
  filename    String
  status      FileStatus  @default(PENDING)
  file_url    String?
  file_chunks FileChunk[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  uploader_id String
  uploader    User   @relation(fields: [uploader_id], references: [id], onDelete: Cascade)

  folder_id String
  folder    Folder @relation(fields: [folder_id], references: [id])
}

model FileChunk {
  id         String   @id @default(cuid())
  vectorId   String
  chunkIndex Int
  file_id    String
  file       File     @relation(fields: [file_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  createdBy String
  users     User[]
  files     File[]
  thread    Thread[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id        String    @id @default(cuid())
  message   Message[]
  folder_id String
  folder    Folder    @relation(fields: [folder_id], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum ROLE {
  USER
  AI
}

model Message {
  id        String   @id @default(cuid())
  content   String
  role      ROLE
  chat_id   String
  chat      Thread   @relation(fields: [chat_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
